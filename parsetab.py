
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA ECHO ELSE EQUALS FUNC IDENTIFIER IF INT LBRACE LESS LPAREN MINUS MORE NUMBER PLUS RBRACE REPEAT RETURN RPAREN SEMICOLON STRINGprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : var_decl\n                 | echo_statement\n                 | function_decl\n                 | repeat_statement\n                 | if_statement\n                 | return_statementvar_decl : INT IDENTIFIER EQUALS expression SEMICOLONecho_statement : ECHO LPAREN expression RPAREN SEMICOLONfunction_decl : FUNC IDENTIFIER LPAREN opt_param_list RPAREN LBRACE statement_list RBRACEopt_param_list : param_list\n                      | emptyparam_list : param_list COMMA INT IDENTIFIER\n                  | INT IDENTIFIERrepeat_statement : REPEAT LPAREN var_decl expression SEMICOLON increment RPAREN LBRACE statement_list RBRACEcondition : expressionincrement : IDENTIFIER PLUS PLUS SEMICOLONif_statement : IF LPAREN expression RPAREN LBRACE statement_list RBRACE opt_elseopt_else : ELSE LBRACE statement_list RBRACE\n                | emptyreturn_statement : RETURN expression SEMICOLONempty :expression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression MORE expression\n                  | expression LESS expression\n                  | NUMBER\n                  | IDENTIFIER'
    
_lr_action_items = {'INT':([0,2,3,4,5,6,7,8,9,16,20,27,30,47,48,50,53,54,58,59,63,64,65,67,69,70,72,73,74,75,],[10,10,-3,-4,-5,-6,-7,-8,-9,-2,10,40,-23,-10,-11,55,10,10,10,10,-24,-12,10,-20,-22,10,10,-17,10,-21,]),'ECHO':([0,2,3,4,5,6,7,8,9,16,30,47,48,53,54,58,59,63,64,65,67,69,70,72,73,74,75,],[11,11,-3,-4,-5,-6,-7,-8,-9,-2,-23,-10,-11,11,11,11,11,-24,-12,11,-20,-22,11,11,-17,11,-21,]),'FUNC':([0,2,3,4,5,6,7,8,9,16,30,47,48,53,54,58,59,63,64,65,67,69,70,72,73,74,75,],[12,12,-3,-4,-5,-6,-7,-8,-9,-2,-23,-10,-11,12,12,12,12,-24,-12,12,-20,-22,12,12,-17,12,-21,]),'REPEAT':([0,2,3,4,5,6,7,8,9,16,30,47,48,53,54,58,59,63,64,65,67,69,70,72,73,74,75,],[13,13,-3,-4,-5,-6,-7,-8,-9,-2,-23,-10,-11,13,13,13,13,-24,-12,13,-20,-22,13,13,-17,13,-21,]),'IF':([0,2,3,4,5,6,7,8,9,16,30,47,48,53,54,58,59,63,64,65,67,69,70,72,73,74,75,],[14,14,-3,-4,-5,-6,-7,-8,-9,-2,-23,-10,-11,14,14,14,14,-24,-12,14,-20,-22,14,14,-17,14,-21,]),'RETURN':([0,2,3,4,5,6,7,8,9,16,30,47,48,53,54,58,59,63,64,65,67,69,70,72,73,74,75,],[15,15,-3,-4,-5,-6,-7,-8,-9,-2,-23,-10,-11,15,15,15,15,-24,-12,15,-20,-22,15,15,-17,15,-21,]),'$end':([1,2,3,4,5,6,7,8,9,16,30,47,48,63,64,67,69,73,75,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-2,-23,-10,-11,-24,-12,-20,-22,-17,-21,]),'RBRACE':([3,4,5,6,7,8,9,16,30,47,48,58,59,63,64,67,69,70,73,74,75,],[-3,-4,-5,-6,-7,-8,-9,-2,-23,-10,-11,63,64,-24,-12,-20,-22,73,-17,75,-21,]),'IDENTIFIER':([10,12,15,18,21,25,28,31,32,33,34,40,47,52,55,],[17,19,24,24,24,24,24,24,24,24,24,51,-10,57,60,]),'LPAREN':([11,13,14,19,],[18,20,21,27,]),'NUMBER':([15,18,21,25,28,31,32,33,34,47,],[23,23,23,23,23,23,23,23,23,-10,]),'EQUALS':([17,],[25,]),'SEMICOLON':([22,23,24,35,36,41,43,44,45,46,66,],[30,-29,-30,47,48,52,-25,-26,-27,-28,71,]),'PLUS':([22,23,24,26,29,35,41,43,44,45,46,57,62,],[31,-29,-30,31,31,31,31,31,31,31,31,62,66,]),'MINUS':([22,23,24,26,29,35,41,43,44,45,46,],[32,-29,-30,32,32,32,32,32,32,32,32,]),'MORE':([22,23,24,26,29,35,41,43,44,45,46,],[33,-29,-30,33,33,33,33,33,33,33,33,]),'LESS':([22,23,24,26,29,35,41,43,44,45,46,],[34,-29,-30,34,34,34,34,34,34,34,34,]),'RPAREN':([23,24,26,27,29,37,38,39,43,44,45,46,51,56,60,71,],[-29,-30,36,-24,42,49,-13,-14,-25,-26,-27,-28,-16,61,-15,-19,]),'COMMA':([38,51,60,],[50,-16,-15,]),'LBRACE':([42,49,61,68,],[53,54,65,72,]),'ELSE':([63,],[68,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,53,54,65,72,],[2,58,59,70,74,]),'statement':([0,2,53,54,58,59,65,70,72,74,],[3,16,3,3,16,16,3,16,3,16,]),'var_decl':([0,2,20,53,54,58,59,65,70,72,74,],[4,4,28,4,4,4,4,4,4,4,4,]),'echo_statement':([0,2,53,54,58,59,65,70,72,74,],[5,5,5,5,5,5,5,5,5,5,]),'function_decl':([0,2,53,54,58,59,65,70,72,74,],[6,6,6,6,6,6,6,6,6,6,]),'repeat_statement':([0,2,53,54,58,59,65,70,72,74,],[7,7,7,7,7,7,7,7,7,7,]),'if_statement':([0,2,53,54,58,59,65,70,72,74,],[8,8,8,8,8,8,8,8,8,8,]),'return_statement':([0,2,53,54,58,59,65,70,72,74,],[9,9,9,9,9,9,9,9,9,9,]),'expression':([15,18,21,25,28,31,32,33,34,],[22,26,29,35,41,43,44,45,46,]),'opt_param_list':([27,],[37,]),'param_list':([27,],[38,]),'empty':([27,63,],[39,69,]),'increment':([52,],[56,]),'opt_else':([63,],[67,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','syntax_parser.py',6),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','syntax_parser.py',11),
  ('statement_list -> statement','statement_list',1,'p_statement_list','syntax_parser.py',12),
  ('statement -> var_decl','statement',1,'p_statement','syntax_parser.py',20),
  ('statement -> echo_statement','statement',1,'p_statement','syntax_parser.py',21),
  ('statement -> function_decl','statement',1,'p_statement','syntax_parser.py',22),
  ('statement -> repeat_statement','statement',1,'p_statement','syntax_parser.py',23),
  ('statement -> if_statement','statement',1,'p_statement','syntax_parser.py',24),
  ('statement -> return_statement','statement',1,'p_statement','syntax_parser.py',25),
  ('var_decl -> INT IDENTIFIER EQUALS expression SEMICOLON','var_decl',5,'p_var_decl','syntax_parser.py',30),
  ('echo_statement -> ECHO LPAREN expression RPAREN SEMICOLON','echo_statement',5,'p_echo_statement','syntax_parser.py',35),
  ('function_decl -> FUNC IDENTIFIER LPAREN opt_param_list RPAREN LBRACE statement_list RBRACE','function_decl',8,'p_function_decl','syntax_parser.py',40),
  ('opt_param_list -> param_list','opt_param_list',1,'p_opt_param_list','syntax_parser.py',45),
  ('opt_param_list -> empty','opt_param_list',1,'p_opt_param_list','syntax_parser.py',46),
  ('param_list -> param_list COMMA INT IDENTIFIER','param_list',4,'p_param_list','syntax_parser.py',51),
  ('param_list -> INT IDENTIFIER','param_list',2,'p_param_list','syntax_parser.py',52),
  ('repeat_statement -> REPEAT LPAREN var_decl expression SEMICOLON increment RPAREN LBRACE statement_list RBRACE','repeat_statement',10,'p_repeat_statement','syntax_parser.py',60),
  ('condition -> expression','condition',1,'p_condition','syntax_parser.py',65),
  ('increment -> IDENTIFIER PLUS PLUS SEMICOLON','increment',4,'p_increment','syntax_parser.py',70),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE opt_else','if_statement',8,'p_if_statement','syntax_parser.py',75),
  ('opt_else -> ELSE LBRACE statement_list RBRACE','opt_else',4,'p_opt_else','syntax_parser.py',80),
  ('opt_else -> empty','opt_else',1,'p_opt_else','syntax_parser.py',81),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','syntax_parser.py',89),
  ('empty -> <empty>','empty',0,'p_empty','syntax_parser.py',94),
  ('expression -> expression PLUS expression','expression',3,'p_expression','syntax_parser.py',99),
  ('expression -> expression MINUS expression','expression',3,'p_expression','syntax_parser.py',100),
  ('expression -> expression MORE expression','expression',3,'p_expression','syntax_parser.py',101),
  ('expression -> expression LESS expression','expression',3,'p_expression','syntax_parser.py',102),
  ('expression -> NUMBER','expression',1,'p_expression','syntax_parser.py',103),
  ('expression -> IDENTIFIER','expression',1,'p_expression','syntax_parser.py',104),
]
